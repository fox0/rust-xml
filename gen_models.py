import re
import sys
# from pprint import pprint

import xmlschema


def main(file):
    print(f'//! DO NOT EDIT! Generated by {sys.argv[0]}\n', file=file)
    filename = 'schemas/запрос-авторизация.xsd'
    xs = xmlschema.XMLSchema(filename)
    print(f'// from {filename}\n', file=file)
    for i in xs.iter_globals():
        print(f'/// {i.annotation.documentation[0].text}', file=file)
        print('#[derive(Debug, Serialize)]', file=file)
        print(f'pub struct {i.name} {{', file=file)
        for j in i.iterchildren():
            print(f'    /// {j.annotation.documentation[0].text}', file=file)
            name = to_snake_case(j.name)
            if name != j.name:
                print(f'    #[serde(rename = "{j.name}", default)]', file=file)
            if j.type.max_length is not None:
                print(f'    // max_length = {j.type.max_length}', file=file)

            typ = {
                'string': 'String',
                'unsignedLong': 'u64',
            }[j.type.base_type.local_name]
            assert j.max_occurs == 1
            if j.min_occurs == 0:
                typ = f'Option<{typ}>'
            elif j.min_occurs == 1:
                pass
            else:
                raise ValueError(j.min_occurs)
            print(f'    pub {name}: {typ},', file=file)
        print('}\n', file=file)


def to_snake_case(name: str) -> str:
    """

    >>> to_snake_case('InstitutionID')
    'institution_id'
    """
    return re.sub(r'([A-Z]+)', lambda m: '_' + m.group(1).lower(), name).lstrip('_')


if __name__ == '__main__':
    with sys.stdout as file:
        main(file)
